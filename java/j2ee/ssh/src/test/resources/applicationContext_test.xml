<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
       default-lazy-init="false" default-autowire="byName">

    <!--Hibernate session factory (Using hibernate config file)  -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
    </bean>

    <!-- Hibernate session factory (Using data source) -->
    <!--
        <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="mappingResources">
                <list>
                    <value>com/huang/j2ee/ssh/model/Ireport.hbm.xml</value>
                </list>
            </property>
            <property name="hibernateProperties">
                <value>
                    hibernate.dialect=org.hibernate.dialect.MySQLDialect
                    hibernate.hbm2ddl.auto=update
                </value>
            </property>
        </bean>
    -->

    <!-- PlatformTransactionManager implement by Hibernate -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Simple DAO Bean -->
    <bean id="jsprDao" class="com.huang.j2ee.ssh.model.IreportDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- AOP示例 -->
    <bean id="logAround" class="com.huang.j2ee.ssh.service.LogAround"/>
    <bean id="logBefore" class="com.huang.j2ee.ssh.service.LogBefore"/>
    <bean id="logAfter" class="com.huang.j2ee.ssh.service.LogAfter"/>
    <bean id="logThrow" class="com.huang.j2ee.ssh.service.LogThrow"/>
    <bean id="timeBook" class="com.huang.j2ee.ssh.service.TimeBookImpl"/>

    <!-- 手动代理 -->
    <!--
        <bean id="logProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
            <property name="proxyInterfaces">
                <value>com.huang.j2eeweb.service.TimeBook/value>
            </property>
            <property name="target">
                <ref bean="timeBook"/>
            </property>
            <property name="interceptorNames">
                <list>
                    <value>logBefore</value>
                    <value>logAround</value>
                    <value>logAfter</value>
                    <value>logThrow</value>
                </list>
            </property>
        </bean>
    -->

    <!-- 自动代理 -->
    <bean id="logAutoProxy"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <bean id="logBeforeAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref bean="logBefore"/>
        </property>
        <property name="patterns">
            <value>.*do.*</value>
        </property>
    </bean>

    <bean id="logAfterAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref bean="logAfter"/>
        </property>
        <property name="patterns">
            <value>.*do.*</value>
        </property>
    </bean>

    <bean id="logThrowAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref bean="logThrow"/>
        </property>
        <property name="patterns">
            <value>.*</value>
        </property>
    </bean>

</beans>
